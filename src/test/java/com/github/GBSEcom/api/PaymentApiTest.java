/*
 * Payment Gateway API Specification.
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001 
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.api;

import com.github.GBSEcom.client.ApiException;
import com.github.GBSEcom.model.AuthenticationResponseVerificationRequest;
import com.github.GBSEcom.model.ErrorResponse;
import com.github.GBSEcom.model.PrimaryTransaction;
import com.github.GBSEcom.model.SecondaryTransaction;
import com.github.GBSEcom.model.TransactionErrorResponse;
import com.github.GBSEcom.model.TransactionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Ignore
public class PaymentApiTest {

    private final PaymentApi api = new PaymentApi();

    
    /**
     * Update a 3DSecure or UnionPay payment and continue processing.
     *
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void finalizeSecureTransactionTest() throws ApiException {
        String contentType = null;
        String clientRequestId = null;
        String apiKey = null;
        Long timestamp = null;
        String transactionId = null;
        AuthenticationResponseVerificationRequest authenticationResponseVerificationRequest = null;
        String messageSignature = null;
        String region = null;
        TransactionResponse response = api.finalizeSecureTransaction(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationResponseVerificationRequest, messageSignature, region);

        // TODO: test validations
    }
    
    /**
     * Capture/complete a transaction.
     *
     * Used to capture/complete an existing transaction. Partial postauths are allowed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void performPaymentPostAuthorisationTest() throws ApiException {
        String contentType = null;
        String clientRequestId = null;
        String apiKey = null;
        Long timestamp = null;
        String transactionId = null;
        SecondaryTransaction secondaryTransaction = null;
        String messageSignature = null;
        String region = null;
        String storeId = null;
        TransactionResponse response = api.performPaymentPostAuthorisation(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId);

        // TODO: test validations
    }
    
    /**
     * Generate a primary transaction.
     *
     * Use this to originate a financial transaction, like a sale, preauthorization, or credit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void primaryPaymentTransactionTest() throws ApiException {
        String contentType = null;
        String clientRequestId = null;
        String apiKey = null;
        Long timestamp = null;
        PrimaryTransaction primaryTransaction = null;
        String messageSignature = null;
        String region = null;
        TransactionResponse response = api.primaryPaymentTransaction(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region);

        // TODO: test validations
    }
    
    /**
     * Return/refund a transaction.
     *
     * Use this to return/refund an existing transaction.  Partial returns are allowed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void returnTransactionTest() throws ApiException {
        String contentType = null;
        String clientRequestId = null;
        String apiKey = null;
        Long timestamp = null;
        String transactionId = null;
        SecondaryTransaction secondaryTransaction = null;
        String messageSignature = null;
        String region = null;
        String storeId = null;
        TransactionResponse response = api.returnTransaction(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve the state of a transaction.
     *
     * Use this query to get the current state of an existing transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionInquiryTest() throws ApiException {
        String contentType = null;
        String clientRequestId = null;
        String apiKey = null;
        Long timestamp = null;
        String transactionId = null;
        String messageSignature = null;
        String region = null;
        String storeId = null;
        TransactionResponse response = api.transactionInquiry(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId);

        // TODO: test validations
    }
    
    /**
     * Reverse a previous action on an existing transaction.
     *
     * Use this to reverse a postauth/completion, credit, preauth, or sale.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidTransactionTest() throws ApiException {
        String contentType = null;
        String clientRequestId = null;
        String apiKey = null;
        Long timestamp = null;
        String transactionId = null;
        String messageSignature = null;
        String region = null;
        String storeId = null;
        TransactionResponse response = api.voidTransaction(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId);

        // TODO: test validations
    }
    
}
