/*
 * Payment Gateway API Specification.
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Attributes for controlling transactions with additional parameters like dccFlow, &#39;3ds&#39; flows.
 */
@ApiModel(description = "Attributes for controlling transactions with additional parameters like dccFlow, '3ds' flows.")

public class RedirectAttributes {
  /**
   * Indicates whether or not a challenge should be performed. 01 &#x3D; No preference (You have no preference whether a challenge should be performed. This is the default value) 02 &#x3D; No challenge requested (You prefer that no challenge should be performed) 03 &#x3D; Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 &#x3D; Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) 
   */
  @JsonAdapter(ChallengeIndicatorEnum.Adapter.class)
  public enum ChallengeIndicatorEnum {
    _01("01"),
    
    _02("02"),
    
    _03("03"),
    
    _04("04");

    private String value;

    ChallengeIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChallengeIndicatorEnum fromValue(String value) {
      for (ChallengeIndicatorEnum b : ChallengeIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChallengeIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChallengeIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChallengeIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChallengeIndicatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHALLENGE_INDICATOR = "challengeIndicator";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_INDICATOR)
  private ChallengeIndicatorEnum challengeIndicator = ChallengeIndicatorEnum._01;

  public static final String SERIALIZED_NAME_AUTHENTICATE_TRANSACTION = "authenticateTransaction";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATE_TRANSACTION)
  private Boolean authenticateTransaction;

  /**
   * EmvCo Messag Category
   */
  @JsonAdapter(ThreeDSEmvCoMessageCategoryEnum.Adapter.class)
  public enum ThreeDSEmvCoMessageCategoryEnum {
    _01("01"),
    
    _02("02"),
    
    _80("80");

    private String value;

    ThreeDSEmvCoMessageCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreeDSEmvCoMessageCategoryEnum fromValue(String value) {
      for (ThreeDSEmvCoMessageCategoryEnum b : ThreeDSEmvCoMessageCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreeDSEmvCoMessageCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreeDSEmvCoMessageCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreeDSEmvCoMessageCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ThreeDSEmvCoMessageCategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_THREE_D_S_EMV_CO_MESSAGE_CATEGORY = "threeDSEmvCoMessageCategory";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_EMV_CO_MESSAGE_CATEGORY)
  private ThreeDSEmvCoMessageCategoryEnum threeDSEmvCoMessageCategory;

  public static final String SERIALIZED_NAME_BROWSER_JAVA_SCRIPT_ENABLED = "browserJavaScriptEnabled";
  @SerializedName(SERIALIZED_NAME_BROWSER_JAVA_SCRIPT_ENABLED)
  private Boolean browserJavaScriptEnabled = false;

  public static final String SERIALIZED_NAME_OVERRIDE3DS_COUNTRY_EXCLUSION = "override3dsCountryExclusion";
  @SerializedName(SERIALIZED_NAME_OVERRIDE3DS_COUNTRY_EXCLUSION)
  private Boolean override3dsCountryExclusion = false;

  /**
   * Secure 3D Transaction Type
   */
  @JsonAdapter(ThreeDSTransactionTypeEnum.Adapter.class)
  public enum ThreeDSTransactionTypeEnum {
    _01("01"),
    
    _03("03"),
    
    _10("10"),
    
    _11("11"),
    
    _28("28");

    private String value;

    ThreeDSTransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreeDSTransactionTypeEnum fromValue(String value) {
      for (ThreeDSTransactionTypeEnum b : ThreeDSTransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreeDSTransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreeDSTransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreeDSTransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ThreeDSTransactionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_THREE_D_S_TRANSACTION_TYPE = "threeDSTransactionType";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_TRANSACTION_TYPE)
  private ThreeDSTransactionTypeEnum threeDSTransactionType;

  public static final String SERIALIZED_NAME_SKIP_T_R_A = "skipTRA";
  @SerializedName(SERIALIZED_NAME_SKIP_T_R_A)
  private Boolean skipTRA = false;

  public static final String SERIALIZED_NAME_FULL_BYPASS = "fullBypass";
  @SerializedName(SERIALIZED_NAME_FULL_BYPASS)
  private Boolean fullBypass = false;

  public static final String SERIALIZED_NAME_MOBILE_MODE = "mobileMode";
  @SerializedName(SERIALIZED_NAME_MOBILE_MODE)
  private Boolean mobileMode = false;

  /**
   * Payment Mode
   */
  @JsonAdapter(PaymentModeEnum.Adapter.class)
  public enum PaymentModeEnum {
    FULLPAY("FULLPAY"),
    
    PAYONLY("PAYONLY"),
    
    PAYPLUS("PAYPLUS");

    private String value;

    PaymentModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentModeEnum fromValue(String value) {
      for (PaymentModeEnum b : PaymentModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_MODE = "paymentMode";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MODE)
  private PaymentModeEnum paymentMode;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;


  public RedirectAttributes challengeIndicator(ChallengeIndicatorEnum challengeIndicator) {
    
    this.challengeIndicator = challengeIndicator;
    return this;
  }

   /**
   * Indicates whether or not a challenge should be performed. 01 &#x3D; No preference (You have no preference whether a challenge should be performed. This is the default value) 02 &#x3D; No challenge requested (You prefer that no challenge should be performed) 03 &#x3D; Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 &#x3D; Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) 
   * @return challengeIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01", value = "Indicates whether or not a challenge should be performed. 01 = No preference (You have no preference whether a challenge should be performed. This is the default value) 02 = No challenge requested (You prefer that no challenge should be performed) 03 = Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 = Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) ")

  public ChallengeIndicatorEnum getChallengeIndicator() {
    return challengeIndicator;
  }



  public void setChallengeIndicator(ChallengeIndicatorEnum challengeIndicator) {
    this.challengeIndicator = challengeIndicator;
  }


  public RedirectAttributes authenticateTransaction(Boolean authenticateTransaction) {
    
    this.authenticateTransaction = authenticateTransaction;
    return this;
  }

   /**
   * If 3D secure should be applied.
   * @return authenticateTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "If 3D secure should be applied.")

  public Boolean getAuthenticateTransaction() {
    return authenticateTransaction;
  }



  public void setAuthenticateTransaction(Boolean authenticateTransaction) {
    this.authenticateTransaction = authenticateTransaction;
  }


  public RedirectAttributes threeDSEmvCoMessageCategory(ThreeDSEmvCoMessageCategoryEnum threeDSEmvCoMessageCategory) {
    
    this.threeDSEmvCoMessageCategory = threeDSEmvCoMessageCategory;
    return this;
  }

   /**
   * EmvCo Messag Category
   * @return threeDSEmvCoMessageCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01", value = "EmvCo Messag Category")

  public ThreeDSEmvCoMessageCategoryEnum getThreeDSEmvCoMessageCategory() {
    return threeDSEmvCoMessageCategory;
  }



  public void setThreeDSEmvCoMessageCategory(ThreeDSEmvCoMessageCategoryEnum threeDSEmvCoMessageCategory) {
    this.threeDSEmvCoMessageCategory = threeDSEmvCoMessageCategory;
  }


  public RedirectAttributes browserJavaScriptEnabled(Boolean browserJavaScriptEnabled) {
    
    this.browserJavaScriptEnabled = browserJavaScriptEnabled;
    return this;
  }

   /**
   * Browser Java Script Enabled flag
   * @return browserJavaScriptEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Browser Java Script Enabled flag")

  public Boolean getBrowserJavaScriptEnabled() {
    return browserJavaScriptEnabled;
  }



  public void setBrowserJavaScriptEnabled(Boolean browserJavaScriptEnabled) {
    this.browserJavaScriptEnabled = browserJavaScriptEnabled;
  }


  public RedirectAttributes override3dsCountryExclusion(Boolean override3dsCountryExclusion) {
    
    this.override3dsCountryExclusion = override3dsCountryExclusion;
    return this;
  }

   /**
   * Override 3ds Country Exclusion flag
   * @return override3dsCountryExclusion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Override 3ds Country Exclusion flag")

  public Boolean getOverride3dsCountryExclusion() {
    return override3dsCountryExclusion;
  }



  public void setOverride3dsCountryExclusion(Boolean override3dsCountryExclusion) {
    this.override3dsCountryExclusion = override3dsCountryExclusion;
  }


  public RedirectAttributes threeDSTransactionType(ThreeDSTransactionTypeEnum threeDSTransactionType) {
    
    this.threeDSTransactionType = threeDSTransactionType;
    return this;
  }

   /**
   * Secure 3D Transaction Type
   * @return threeDSTransactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01", value = "Secure 3D Transaction Type")

  public ThreeDSTransactionTypeEnum getThreeDSTransactionType() {
    return threeDSTransactionType;
  }



  public void setThreeDSTransactionType(ThreeDSTransactionTypeEnum threeDSTransactionType) {
    this.threeDSTransactionType = threeDSTransactionType;
  }


  public RedirectAttributes skipTRA(Boolean skipTRA) {
    
    this.skipTRA = skipTRA;
    return this;
  }

   /**
   * skip TRA exemption for the transaction
   * @return skipTRA
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "skip TRA exemption for the transaction")

  public Boolean getSkipTRA() {
    return skipTRA;
  }



  public void setSkipTRA(Boolean skipTRA) {
    this.skipTRA = skipTRA;
  }


  public RedirectAttributes fullBypass(Boolean fullBypass) {
    
    this.fullBypass = fullBypass;
    return this;
  }

   /**
   * Full by pass flag
   * @return fullBypass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full by pass flag")

  public Boolean getFullBypass() {
    return fullBypass;
  }



  public void setFullBypass(Boolean fullBypass) {
    this.fullBypass = fullBypass;
  }


  public RedirectAttributes mobileMode(Boolean mobileMode) {
    
    this.mobileMode = mobileMode;
    return this;
  }

   /**
   * Mobile mode flag
   * @return mobileMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mobile mode flag")

  public Boolean getMobileMode() {
    return mobileMode;
  }



  public void setMobileMode(Boolean mobileMode) {
    this.mobileMode = mobileMode;
  }


  public RedirectAttributes paymentMode(PaymentModeEnum paymentMode) {
    
    this.paymentMode = paymentMode;
    return this;
  }

   /**
   * Payment Mode
   * @return paymentMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FULLPAY", value = "Payment Mode")

  public PaymentModeEnum getPaymentMode() {
    return paymentMode;
  }



  public void setPaymentMode(PaymentModeEnum paymentMode) {
    this.paymentMode = paymentMode;
  }


  public RedirectAttributes language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Language used by client.
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "Language used by client.")

  public String getLanguage() {
    return language;
  }



  public void setLanguage(String language) {
    this.language = language;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedirectAttributes redirectAttributes = (RedirectAttributes) o;
    return Objects.equals(this.challengeIndicator, redirectAttributes.challengeIndicator) &&
        Objects.equals(this.authenticateTransaction, redirectAttributes.authenticateTransaction) &&
        Objects.equals(this.threeDSEmvCoMessageCategory, redirectAttributes.threeDSEmvCoMessageCategory) &&
        Objects.equals(this.browserJavaScriptEnabled, redirectAttributes.browserJavaScriptEnabled) &&
        Objects.equals(this.override3dsCountryExclusion, redirectAttributes.override3dsCountryExclusion) &&
        Objects.equals(this.threeDSTransactionType, redirectAttributes.threeDSTransactionType) &&
        Objects.equals(this.skipTRA, redirectAttributes.skipTRA) &&
        Objects.equals(this.fullBypass, redirectAttributes.fullBypass) &&
        Objects.equals(this.mobileMode, redirectAttributes.mobileMode) &&
        Objects.equals(this.paymentMode, redirectAttributes.paymentMode) &&
        Objects.equals(this.language, redirectAttributes.language);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengeIndicator, authenticateTransaction, threeDSEmvCoMessageCategory, browserJavaScriptEnabled, override3dsCountryExclusion, threeDSTransactionType, skipTRA, fullBypass, mobileMode, paymentMode, language);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedirectAttributes {\n");
    sb.append("    challengeIndicator: ").append(toIndentedString(challengeIndicator)).append("\n");
    sb.append("    authenticateTransaction: ").append(toIndentedString(authenticateTransaction)).append("\n");
    sb.append("    threeDSEmvCoMessageCategory: ").append(toIndentedString(threeDSEmvCoMessageCategory)).append("\n");
    sb.append("    browserJavaScriptEnabled: ").append(toIndentedString(browserJavaScriptEnabled)).append("\n");
    sb.append("    override3dsCountryExclusion: ").append(toIndentedString(override3dsCountryExclusion)).append("\n");
    sb.append("    threeDSTransactionType: ").append(toIndentedString(threeDSTransactionType)).append("\n");
    sb.append("    skipTRA: ").append(toIndentedString(skipTRA)).append("\n");
    sb.append("    fullBypass: ").append(toIndentedString(fullBypass)).append("\n");
    sb.append("    mobileMode: ").append(toIndentedString(mobileMode)).append("\n");
    sb.append("    paymentMode: ").append(toIndentedString(paymentMode)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

