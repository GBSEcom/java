/*
 * Payment Gateway API Specification.
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001 
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.GBSEcom.model.AliPay;
import com.github.GBSEcom.model.ChinaDomestic;
import com.github.GBSEcom.model.PayPal;
import com.github.GBSEcom.model.PaymentCard;
import com.github.GBSEcom.model.PaymentTokenization;
import com.github.GBSEcom.model.Sepa;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Various payment methods the Gateway supports
 */
@ApiModel(description = "Various payment methods the Gateway supports")

public class PaymentMethod {
  /**
   * The type of payment method. Note that PayPal can only process a &#39;CREDIT&#39; transaction. Note that for requests we are now supporting only PAYMENT_CARD, SEPA, PAYPAL, ALIPAY. All this types are supported for response.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ALIPAY("ALIPAY"),
    
    ALIPAY_PAYSECURE_US("ALIPAY_PAYSECURE_US"),
    
    ALIPAY_DOMESTIC("ALIPAY_DOMESTIC"),
    
    APM("APM"),
    
    CUP_DOMESTIC("CUP_DOMESTIC"),
    
    DEBITDE("DEBITDE"),
    
    EMI("EMI"),
    
    GIROPAY("GIROPAY"),
    
    IDEAL("IDEAL"),
    
    INDIAWALLET("INDIAWALLET"),
    
    KLARNA("KLARNA"),
    
    NETBANKING("NETBANKING"),
    
    PAYMENT_CARD("PAYMENT_CARD"),
    
    PAYMENT_TOKEN("PAYMENT_TOKEN"),
    
    PAYPAL("PAYPAL"),
    
    SEPA("SEPA"),
    
    SOFORT("SOFORT"),
    
    WALLET("WALLET"),
    
    WECHAT_DOMESTIC("WECHAT_DOMESTIC");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_PAYMENT_CARD = "paymentCard";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CARD)
  private PaymentCard paymentCard = null;

  public static final String SERIALIZED_NAME_PAYMENT_TOKEN = "paymentToken";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOKEN)
  private PaymentTokenization paymentToken = null;

  public static final String SERIALIZED_NAME_SEPA = "sepa";
  @SerializedName(SERIALIZED_NAME_SEPA)
  private Sepa sepa = null;

  public static final String SERIALIZED_NAME_PAY_PAL = "payPal";
  @SerializedName(SERIALIZED_NAME_PAY_PAL)
  private PayPal payPal = null;

  public static final String SERIALIZED_NAME_ALI_PAY = "aliPay";
  @SerializedName(SERIALIZED_NAME_ALI_PAY)
  private AliPay aliPay = null;

  public static final String SERIALIZED_NAME_CHINA_DOMESTIC = "chinaDomestic";
  @SerializedName(SERIALIZED_NAME_CHINA_DOMESTIC)
  private ChinaDomestic chinaDomestic = null;

  public PaymentMethod type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of payment method. Note that PayPal can only process a &#39;CREDIT&#39; transaction. Note that for requests we are now supporting only PAYMENT_CARD, SEPA, PAYPAL, ALIPAY. All this types are supported for response.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of payment method. Note that PayPal can only process a 'CREDIT' transaction. Note that for requests we are now supporting only PAYMENT_CARD, SEPA, PAYPAL, ALIPAY. All this types are supported for response.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PaymentMethod paymentCard(PaymentCard paymentCard) {
    this.paymentCard = paymentCard;
    return this;
  }

   /**
   * Get paymentCard
   * @return paymentCard
  **/
  @ApiModelProperty(value = "")
  public PaymentCard getPaymentCard() {
    return paymentCard;
  }

  public void setPaymentCard(PaymentCard paymentCard) {
    this.paymentCard = paymentCard;
  }

  public PaymentMethod paymentToken(PaymentTokenization paymentToken) {
    this.paymentToken = paymentToken;
    return this;
  }

   /**
   * Get paymentToken
   * @return paymentToken
  **/
  @ApiModelProperty(value = "")
  public PaymentTokenization getPaymentToken() {
    return paymentToken;
  }

  public void setPaymentToken(PaymentTokenization paymentToken) {
    this.paymentToken = paymentToken;
  }

  public PaymentMethod sepa(Sepa sepa) {
    this.sepa = sepa;
    return this;
  }

   /**
   * Get sepa
   * @return sepa
  **/
  @ApiModelProperty(value = "")
  public Sepa getSepa() {
    return sepa;
  }

  public void setSepa(Sepa sepa) {
    this.sepa = sepa;
  }

  public PaymentMethod payPal(PayPal payPal) {
    this.payPal = payPal;
    return this;
  }

   /**
   * Get payPal
   * @return payPal
  **/
  @ApiModelProperty(value = "")
  public PayPal getPayPal() {
    return payPal;
  }

  public void setPayPal(PayPal payPal) {
    this.payPal = payPal;
  }

  public PaymentMethod aliPay(AliPay aliPay) {
    this.aliPay = aliPay;
    return this;
  }

   /**
   * Get aliPay
   * @return aliPay
  **/
  @ApiModelProperty(value = "")
  public AliPay getAliPay() {
    return aliPay;
  }

  public void setAliPay(AliPay aliPay) {
    this.aliPay = aliPay;
  }

  public PaymentMethod chinaDomestic(ChinaDomestic chinaDomestic) {
    this.chinaDomestic = chinaDomestic;
    return this;
  }

   /**
   * Get chinaDomestic
   * @return chinaDomestic
  **/
  @ApiModelProperty(value = "")
  public ChinaDomestic getChinaDomestic() {
    return chinaDomestic;
  }

  public void setChinaDomestic(ChinaDomestic chinaDomestic) {
    this.chinaDomestic = chinaDomestic;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethod paymentMethod = (PaymentMethod) o;
    return Objects.equals(this.type, paymentMethod.type) &&
        Objects.equals(this.paymentCard, paymentMethod.paymentCard) &&
        Objects.equals(this.paymentToken, paymentMethod.paymentToken) &&
        Objects.equals(this.sepa, paymentMethod.sepa) &&
        Objects.equals(this.payPal, paymentMethod.payPal) &&
        Objects.equals(this.aliPay, paymentMethod.aliPay) &&
        Objects.equals(this.chinaDomestic, paymentMethod.chinaDomestic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, paymentCard, paymentToken, sepa, payPal, aliPay, chinaDomestic);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethod {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    paymentCard: ").append(toIndentedString(paymentCard)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    sepa: ").append(toIndentedString(sepa)).append("\n");
    sb.append("    payPal: ").append(toIndentedString(payPal)).append("\n");
    sb.append("    aliPay: ").append(toIndentedString(aliPay)).append("\n");
    sb.append("    chinaDomestic: ").append(toIndentedString(chinaDomestic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

