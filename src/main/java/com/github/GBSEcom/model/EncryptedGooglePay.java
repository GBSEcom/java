/*
 * Payment Gateway API Specification.
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.1.0.20210122.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.GBSEcom.model.EncryptedGooglePayData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Encrypted Google Pay payload.
 */
@ApiModel(description = "Encrypted Google Pay payload.")

public class EncryptedGooglePay {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private EncryptedGooglePayData data;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;


  public EncryptedGooglePay data(EncryptedGooglePayData data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @ApiModelProperty(required = true, value = "")

  public EncryptedGooglePayData getData() {
    return data;
  }



  public void setData(EncryptedGooglePayData data) {
    this.data = data;
  }


  public EncryptedGooglePay signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Signature for verifying that the message comes from Google. The signature is created using ECDSA.
   * @return signature
  **/
  @ApiModelProperty(example = "MEUCIFWTRWUZAOM5nfJC79FtJm56olnbwG4H5uWWxAUWAquiAiEA24j/BcOroeISsdJzYsyoVi8wzu4tnmKw+jdsGfuvPko=", required = true, value = "Signature for verifying that the message comes from Google. The signature is created using ECDSA.")

  public String getSignature() {
    return signature;
  }



  public void setSignature(String signature) {
    this.signature = signature;
  }


  public EncryptedGooglePay version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Identifies under which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. For Google Payments transactions, this should be set to ECv1.
   * @return version
  **/
  @ApiModelProperty(example = "ECv1", required = true, value = "Identifies under which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. For Google Payments transactions, this should be set to ECv1.")

  public String getVersion() {
    return version;
  }



  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptedGooglePay encryptedGooglePay = (EncryptedGooglePay) o;
    return Objects.equals(this.data, encryptedGooglePay.data) &&
        Objects.equals(this.signature, encryptedGooglePay.signature) &&
        Objects.equals(this.version, encryptedGooglePay.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, signature, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptedGooglePay {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

