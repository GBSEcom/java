/*
 * Payment Gateway API Specification.
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * OpenAPI spec version: 6.9.1.20191223.002
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * The loyalty program information associated with this payment.
 */
@ApiModel(description = "The loyalty program information associated with this payment.")

public class Loyalty {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private String program;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private BigDecimal balance;

  public Loyalty id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A unique ID associated with the loyalty program account. Must be unique within the merchants system. Depending on loyalty programs the account might also serve as a credit/bank account. If this is the case the ID must be not be the PAN.
   * @return id
  **/
  @ApiModelProperty(example = "AK0123456789", value = "A unique ID associated with the loyalty program account. Must be unique within the merchants system. Depending on loyalty programs the account might also serve as a credit/bank account. If this is the case the ID must be not be the PAN.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Loyalty program(String program) {
    this.program = program;
    return this;
  }

   /**
   * A string that identifies the program in which the customer is enrolled if the merchant supports several programs or levels.
   * @return program
  **/
  @ApiModelProperty(example = "gold", value = "A string that identifies the program in which the customer is enrolled if the merchant supports several programs or levels.")
  public String getProgram() {
    return program;
  }

  public void setProgram(String program) {
    this.program = program;
  }

  public Loyalty balance(BigDecimal balance) {
    this.balance = balance;
    return this;
  }

   /**
   * The balance of the loyalty program account in a program specific currency (e.g. points).
   * @return balance
  **/
  @ApiModelProperty(example = "163", value = "The balance of the loyalty program account in a program specific currency (e.g. points).")
  public BigDecimal getBalance() {
    return balance;
  }

  public void setBalance(BigDecimal balance) {
    this.balance = balance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loyalty loyalty = (Loyalty) o;
    return Objects.equals(this.id, loyalty.id) &&
        Objects.equals(this.program, loyalty.program) &&
        Objects.equals(this.balance, loyalty.balance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, program, balance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loyalty {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

