/*
 * Payment Gateway API Specification.
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001 
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * this object contains payment tokenization details
 */
@ApiModel(description = "this object contains payment tokenization details")

public class PaymentTokenization {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PAYMENT_CARD("PAYMENT_CARD");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_REUSABLE = "reusable";
  @SerializedName(SERIALIZED_NAME_REUSABLE)
  private Boolean reusable = true;

  public static final String SERIALIZED_NAME_DECLINE_DUPLICATES = "declineDuplicates";
  @SerializedName(SERIALIZED_NAME_DECLINE_DUPLICATES)
  private Boolean declineDuplicates = false;

  public static final String SERIALIZED_NAME_LAST4 = "last4";
  @SerializedName(SERIALIZED_NAME_LAST4)
  private String last4;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ACCOUNT_VERIFICATION = "accountVerification";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_VERIFICATION)
  private Boolean accountVerification = false;

  public static final String SERIALIZED_NAME_SECURITY_CODE = "securityCode";
  @SerializedName(SERIALIZED_NAME_SECURITY_CODE)
  private String securityCode;

  public PaymentTokenization type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public PaymentTokenization value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Client supplied Payment Token value
   * @return value
  **/
  @ApiModelProperty(value = "Client supplied Payment Token value")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public PaymentTokenization reusable(Boolean reusable) {
    this.reusable = reusable;
    return this;
  }

   /**
   * One time or reusable token
   * @return reusable
  **/
  @ApiModelProperty(value = "One time or reusable token")
  public Boolean getReusable() {
    return reusable;
  }

  public void setReusable(Boolean reusable) {
    this.reusable = reusable;
  }

  public PaymentTokenization declineDuplicates(Boolean declineDuplicates) {
    this.declineDuplicates = declineDuplicates;
    return this;
  }

   /**
   * Decline duplicate payment info if client token is supplied
   * @return declineDuplicates
  **/
  @ApiModelProperty(value = "Decline duplicate payment info if client token is supplied")
  public Boolean getDeclineDuplicates() {
    return declineDuplicates;
  }

  public void setDeclineDuplicates(Boolean declineDuplicates) {
    this.declineDuplicates = declineDuplicates;
  }

  public PaymentTokenization last4(String last4) {
    this.last4 = last4;
    return this;
  }

   /**
   * The last 4 payment card numbers
   * @return last4
  **/
  @ApiModelProperty(value = "The last 4 payment card numbers")
  public String getLast4() {
    return last4;
  }

  public void setLast4(String last4) {
    this.last4 = last4;
  }

  public PaymentTokenization brand(String brand) {
    this.brand = brand;
    return this;
  }

   /**
   * Only for tokenization with payment
   * @return brand
  **/
  @ApiModelProperty(value = "Only for tokenization with payment")
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }

  public PaymentTokenization country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Only for tokenization with payment
   * @return country
  **/
  @ApiModelProperty(value = "Only for tokenization with payment")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public PaymentTokenization accountVerification(Boolean accountVerification) {
    this.accountVerification = accountVerification;
    return this;
  }

   /**
   * Get accountVerification
   * @return accountVerification
  **/
  @ApiModelProperty(value = "")
  public Boolean getAccountVerification() {
    return accountVerification;
  }

  public void setAccountVerification(Boolean accountVerification) {
    this.accountVerification = accountVerification;
  }

  public PaymentTokenization securityCode(String securityCode) {
    this.securityCode = securityCode;
    return this;
  }

   /**
   * Card Verification Value/Number
   * @return securityCode
  **/
  @ApiModelProperty(example = "977", value = "Card Verification Value/Number")
  public String getSecurityCode() {
    return securityCode;
  }

  public void setSecurityCode(String securityCode) {
    this.securityCode = securityCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentTokenization paymentTokenization = (PaymentTokenization) o;
    return Objects.equals(this.type, paymentTokenization.type) &&
        Objects.equals(this.value, paymentTokenization.value) &&
        Objects.equals(this.reusable, paymentTokenization.reusable) &&
        Objects.equals(this.declineDuplicates, paymentTokenization.declineDuplicates) &&
        Objects.equals(this.last4, paymentTokenization.last4) &&
        Objects.equals(this.brand, paymentTokenization.brand) &&
        Objects.equals(this.country, paymentTokenization.country) &&
        Objects.equals(this.accountVerification, paymentTokenization.accountVerification) &&
        Objects.equals(this.securityCode, paymentTokenization.securityCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, value, reusable, declineDuplicates, last4, brand, country, accountVerification, securityCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentTokenization {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    reusable: ").append(toIndentedString(reusable)).append("\n");
    sb.append("    declineDuplicates: ").append(toIndentedString(declineDuplicates)).append("\n");
    sb.append("    last4: ").append(toIndentedString(last4)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    accountVerification: ").append(toIndentedString(accountVerification)).append("\n");
    sb.append("    securityCode: ").append(toIndentedString(securityCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

