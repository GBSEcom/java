/*
 * Payment Gateway API Specification.
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.14.0.20201015.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.GBSEcom.model.FontFace;
import com.github.GBSEcom.model.FontWeight;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Object contains font properties.
 */
@ApiModel(description = "Object contains font properties.")

public class FontProperties {
  public static final String SERIALIZED_NAME_FONT_FACE = "fontFace";
  @SerializedName(SERIALIZED_NAME_FONT_FACE)
  private FontFace fontFace;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private String fontSize;

  public static final String SERIALIZED_NAME_FONT_WEIGHT = "fontWeight";
  @SerializedName(SERIALIZED_NAME_FONT_WEIGHT)
  private FontWeight fontWeight;

  public static final String SERIALIZED_NAME_FONT_COLOR = "fontColor";
  @SerializedName(SERIALIZED_NAME_FONT_COLOR)
  private String fontColor;


  public FontProperties fontFace(FontFace fontFace) {
    
    this.fontFace = fontFace;
    return this;
  }

   /**
   * Get fontFace
   * @return fontFace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FontFace getFontFace() {
    return fontFace;
  }



  public void setFontFace(FontFace fontFace) {
    this.fontFace = fontFace;
  }


  public FontProperties fontSize(String fontSize) {
    
    this.fontSize = fontSize;
    return this;
  }

   /**
   * Font size property.
   * @return fontSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "xx-small", value = "Font size property.")

  public String getFontSize() {
    return fontSize;
  }



  public void setFontSize(String fontSize) {
    this.fontSize = fontSize;
  }


  public FontProperties fontWeight(FontWeight fontWeight) {
    
    this.fontWeight = fontWeight;
    return this;
  }

   /**
   * Get fontWeight
   * @return fontWeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FontWeight getFontWeight() {
    return fontWeight;
  }



  public void setFontWeight(FontWeight fontWeight) {
    this.fontWeight = fontWeight;
  }


  public FontProperties fontColor(String fontColor) {
    
    this.fontColor = fontColor;
    return this;
  }

   /**
   * Hexadecimal color value.
   * @return fontColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FFEE00", value = "Hexadecimal color value.")

  public String getFontColor() {
    return fontColor;
  }



  public void setFontColor(String fontColor) {
    this.fontColor = fontColor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FontProperties fontProperties = (FontProperties) o;
    return Objects.equals(this.fontFace, fontProperties.fontFace) &&
        Objects.equals(this.fontSize, fontProperties.fontSize) &&
        Objects.equals(this.fontWeight, fontProperties.fontWeight) &&
        Objects.equals(this.fontColor, fontProperties.fontColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fontFace, fontSize, fontWeight, fontColor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FontProperties {\n");
    sb.append("    fontFace: ").append(toIndentedString(fontFace)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    fontWeight: ").append(toIndentedString(fontWeight)).append("\n");
    sb.append("    fontColor: ").append(toIndentedString(fontColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

