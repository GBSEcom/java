/*
 * Payment Gateway API Specification.
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 6.12.0.20200605.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Additional version-dependent information used to decrypt and verify the payment.
 */
@ApiModel(description = "Additional version-dependent information used to decrypt and verify the payment.")

public class EncryptedApplePayHeader {
  public static final String SERIALIZED_NAME_APPLICATION_DATA_HASH = "applicationDataHash";
  @SerializedName(SERIALIZED_NAME_APPLICATION_DATA_HASH)
  private String applicationDataHash;

  public static final String SERIALIZED_NAME_EPHEMERAL_PUBLIC_KEY = "ephemeralPublicKey";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL_PUBLIC_KEY)
  private String ephemeralPublicKey;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_HASH = "publicKeyHash";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_HASH)
  private String publicKeyHash;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;


  public EncryptedApplePayHeader applicationDataHash(String applicationDataHash) {
    
    this.applicationDataHash = applicationDataHash;
    return this;
  }

   /**
   * Merchant supplied information about the payment request. Contains Base64-encoded SHA256 hash of the applicationData property of the original PKPaymentRequest. Note - applicationData from PaymentData of PKPaymentToken Refer to Apple Pay documentation.
   * @return applicationDataHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "94ee059335e587e501cc4bf90613e0814f00a7b08bc7c648fd865a2af6a22cc2", value = "Merchant supplied information about the payment request. Contains Base64-encoded SHA256 hash of the applicationData property of the original PKPaymentRequest. Note - applicationData from PaymentData of PKPaymentToken Refer to Apple Pay documentation.")

  public String getApplicationDataHash() {
    return applicationDataHash;
  }



  public void setApplicationDataHash(String applicationDataHash) {
    this.applicationDataHash = applicationDataHash;
  }


  public EncryptedApplePayHeader ephemeralPublicKey(String ephemeralPublicKey) {
    
    this.ephemeralPublicKey = ephemeralPublicKey;
    return this;
  }

   /**
   * Temporary key for generating shared secret from a device.
   * @return ephemeralPublicKey
  **/
  @ApiModelProperty(example = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEiaU1SbkYTJy/j5L1t51vtGDh4KlNl5MFPWzo/C8r0WcrktWriz5pdRaDVUDvU++KlDu2iuQsd2xSNKJlFscbDQ==", required = true, value = "Temporary key for generating shared secret from a device.")

  public String getEphemeralPublicKey() {
    return ephemeralPublicKey;
  }



  public void setEphemeralPublicKey(String ephemeralPublicKey) {
    this.ephemeralPublicKey = ephemeralPublicKey;
  }


  public EncryptedApplePayHeader publicKeyHash(String publicKeyHash) {
    
    this.publicKeyHash = publicKeyHash;
    return this;
  }

   /**
   * Hash of the X.509 encoded public key bytes of the merchant’s certificate.
   * @return publicKeyHash
  **/
  @ApiModelProperty(example = "YmSWN7lj4+A6fVJVPicP8TgS7gI7ougD8rEWB5LXtMM=", required = true, value = "Hash of the X.509 encoded public key bytes of the merchant’s certificate.")

  public String getPublicKeyHash() {
    return publicKeyHash;
  }



  public void setPublicKeyHash(String publicKeyHash) {
    this.publicKeyHash = publicKeyHash;
  }


  public EncryptedApplePayHeader transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Transaction identifier, generated on the device.
   * @return transactionId
  **/
  @ApiModelProperty(example = "31323334353637", required = true, value = "Transaction identifier, generated on the device.")

  public String getTransactionId() {
    return transactionId;
  }



  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptedApplePayHeader encryptedApplePayHeader = (EncryptedApplePayHeader) o;
    return Objects.equals(this.applicationDataHash, encryptedApplePayHeader.applicationDataHash) &&
        Objects.equals(this.ephemeralPublicKey, encryptedApplePayHeader.ephemeralPublicKey) &&
        Objects.equals(this.publicKeyHash, encryptedApplePayHeader.publicKeyHash) &&
        Objects.equals(this.transactionId, encryptedApplePayHeader.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationDataHash, ephemeralPublicKey, publicKeyHash, transactionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptedApplePayHeader {\n");
    sb.append("    applicationDataHash: ").append(toIndentedString(applicationDataHash)).append("\n");
    sb.append("    ephemeralPublicKey: ").append(toIndentedString(ephemeralPublicKey)).append("\n");
    sb.append("    publicKeyHash: ").append(toIndentedString(publicKeyHash)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

