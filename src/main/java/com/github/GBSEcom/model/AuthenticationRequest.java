/*
 * Payment Gateway API Specification.
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001 
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Request authentication of the payment card to verify the cardholder and be eligible for liability shift.
 */
@ApiModel(description = "Request authentication of the payment card to verify the cardholder and be eligible for liability shift.")

public class AuthenticationRequest {
  /**
   * Indicates what kind of authentication scheme the merchant wants to use on the card.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SECURE_3D("SECURE_3D"),
    
    UNIONPAY("UNIONPAY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SMS_PHONE_NUMBER = "smsPhoneNumber";
  @SerializedName(SERIALIZED_NAME_SMS_PHONE_NUMBER)
  private String smsPhoneNumber;

  public AuthenticationRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Indicates what kind of authentication scheme the merchant wants to use on the card.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Indicates what kind of authentication scheme the merchant wants to use on the card.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AuthenticationRequest smsPhoneNumber(String smsPhoneNumber) {
    this.smsPhoneNumber = smsPhoneNumber;
    return this;
  }

   /**
   * Use this to enter the customer mobile number for SMS verification
   * @return smsPhoneNumber
  **/
  @ApiModelProperty(example = "86-13012345678", value = "Use this to enter the customer mobile number for SMS verification")
  public String getSmsPhoneNumber() {
    return smsPhoneNumber;
  }

  public void setSmsPhoneNumber(String smsPhoneNumber) {
    this.smsPhoneNumber = smsPhoneNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationRequest authenticationRequest = (AuthenticationRequest) o;
    return Objects.equals(this.type, authenticationRequest.type) &&
        Objects.equals(this.smsPhoneNumber, authenticationRequest.smsPhoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, smsPhoneNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationRequest {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    smsPhoneNumber: ").append(toIndentedString(smsPhoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

