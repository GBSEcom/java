/*
 * Payment Gateway API Specification.
 * Payment Gateway API for payment processing. Version 6.4.0.20181018.001 
 *
 * OpenAPI spec version: 6.4.0.20181018.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.api;

import com.github.GBSEcom.client.ApiCallback;
import com.github.GBSEcom.client.ApiClient;
import com.github.GBSEcom.client.ApiException;
import com.github.GBSEcom.client.ApiResponse;
import com.github.GBSEcom.client.Configuration;
import com.github.GBSEcom.client.Pair;
import com.github.GBSEcom.client.ProgressRequestBody;
import com.github.GBSEcom.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.GBSEcom.model.ErrorResponse;
import com.github.GBSEcom.model.OrderResponse;
import com.github.GBSEcom.model.SecondaryTransaction;
import com.github.GBSEcom.model.TransactionErrorResponse;
import com.github.GBSEcom.model.TransactionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient apiClient;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for orderInquiry
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderInquiryCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, String messageSignature, String region, String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orders/{order-id}"
            .replaceAll("\\{" + "order-id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("Client-Request-Id", apiClient.parameterToString(clientRequestId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", apiClient.parameterToString(apiKey));
        }

        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", apiClient.parameterToString(timestamp));
        }

        if (messageSignature != null) {
            localVarHeaderParams.put("Message-Signature", apiClient.parameterToString(messageSignature));
        }

        if (region != null) {
            localVarHeaderParams.put("Region", apiClient.parameterToString(region));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderInquiryValidateBeforeCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, String messageSignature, String region, String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling orderInquiry(Async)");
        }
        
        // verify the required parameter 'clientRequestId' is set
        if (clientRequestId == null) {
            throw new ApiException("Missing the required parameter 'clientRequestId' when calling orderInquiry(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling orderInquiry(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling orderInquiry(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderInquiry(Async)");
        }
        

        com.squareup.okhttp.Call call = orderInquiryCall(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the state of an order
     * Use this query to get the current state of an existing order.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderResponse orderInquiry(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, String messageSignature, String region, String storeId) throws ApiException {
        ApiResponse<OrderResponse> resp = orderInquiryWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId);
        return resp.getData();
    }

    /**
     * Retrieve the state of an order
     * Use this query to get the current state of an existing order.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderResponse> orderInquiryWithHttpInfo(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, String messageSignature, String region, String storeId) throws ApiException {
        com.squareup.okhttp.Call call = orderInquiryValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId, null, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the state of an order (asynchronously)
     * Use this query to get the current state of an existing order.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderInquiryAsync(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, String messageSignature, String region, String storeId, final ApiCallback<OrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderInquiryValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, orderId, messageSignature, region, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderPostAuth
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderPostAuthCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = secondaryTransaction;

        // create path and map variables
        String localVarPath = "/v1/orders/{order-id}/postauth"
            .replaceAll("\\{" + "order-id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("Client-Request-Id", apiClient.parameterToString(clientRequestId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", apiClient.parameterToString(apiKey));
        }

        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", apiClient.parameterToString(timestamp));
        }

        if (messageSignature != null) {
            localVarHeaderParams.put("Message-Signature", apiClient.parameterToString(messageSignature));
        }

        if (region != null) {
            localVarHeaderParams.put("Region", apiClient.parameterToString(region));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderPostAuthValidateBeforeCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling orderPostAuth(Async)");
        }
        
        // verify the required parameter 'clientRequestId' is set
        if (clientRequestId == null) {
            throw new ApiException("Missing the required parameter 'clientRequestId' when calling orderPostAuth(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling orderPostAuth(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling orderPostAuth(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderPostAuth(Async)");
        }
        
        // verify the required parameter 'secondaryTransaction' is set
        if (secondaryTransaction == null) {
            throw new ApiException("Missing the required parameter 'secondaryTransaction' when calling orderPostAuth(Async)");
        }
        

        com.squareup.okhttp.Call call = orderPostAuthCall(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Capture/complete an already existing order.
     * Use this to capture/complete an order. Postauths and partial postauths are allowed.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse orderPostAuth(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId) throws ApiException {
        ApiResponse<TransactionResponse> resp = orderPostAuthWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId);
        return resp.getData();
    }

    /**
     * Capture/complete an already existing order.
     * Use this to capture/complete an order. Postauths and partial postauths are allowed.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> orderPostAuthWithHttpInfo(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId) throws ApiException {
        com.squareup.okhttp.Call call = orderPostAuthValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId, null, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Capture/complete an already existing order. (asynchronously)
     * Use this to capture/complete an order. Postauths and partial postauths are allowed.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderPostAuthAsync(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ApiCallback<TransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderPostAuthValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderReturnTransaction
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderReturnTransactionCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = secondaryTransaction;

        // create path and map variables
        String localVarPath = "/v1/orders/{order-id}/return"
            .replaceAll("\\{" + "order-id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("Client-Request-Id", apiClient.parameterToString(clientRequestId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", apiClient.parameterToString(apiKey));
        }

        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", apiClient.parameterToString(timestamp));
        }

        if (messageSignature != null) {
            localVarHeaderParams.put("Message-Signature", apiClient.parameterToString(messageSignature));
        }

        if (region != null) {
            localVarHeaderParams.put("Region", apiClient.parameterToString(region));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderReturnTransactionValidateBeforeCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling orderReturnTransaction(Async)");
        }
        
        // verify the required parameter 'clientRequestId' is set
        if (clientRequestId == null) {
            throw new ApiException("Missing the required parameter 'clientRequestId' when calling orderReturnTransaction(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling orderReturnTransaction(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling orderReturnTransaction(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderReturnTransaction(Async)");
        }
        
        // verify the required parameter 'secondaryTransaction' is set
        if (secondaryTransaction == null) {
            throw new ApiException("Missing the required parameter 'secondaryTransaction' when calling orderReturnTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = orderReturnTransactionCall(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return/refund an order.
     * Use this for Returns of an existing order. Partial Returns are allowed.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse orderReturnTransaction(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId) throws ApiException {
        ApiResponse<TransactionResponse> resp = orderReturnTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId);
        return resp.getData();
    }

    /**
     * Return/refund an order.
     * Use this for Returns of an existing order. Partial Returns are allowed.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> orderReturnTransactionWithHttpInfo(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId) throws ApiException {
        com.squareup.okhttp.Call call = orderReturnTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId, null, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return/refund an order. (asynchronously)
     * Use this for Returns of an existing order. Partial Returns are allowed.
     * @param contentType content type (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey  (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param orderId Gateway order identifier as returned in the parameter orderId (required)
     * @param secondaryTransaction  (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region The region where client wants to process the transaction (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderReturnTransactionAsync(String contentType, String clientRequestId, String apiKey, Long timestamp, String orderId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ApiCallback<TransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderReturnTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, orderId, secondaryTransaction, messageSignature, region, storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
