/*
 * Payment Gateway API Specification.
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.GBSEcom.api;

import com.github.GBSEcom.client.ApiCallback;
import com.github.GBSEcom.client.ApiClient;
import com.github.GBSEcom.client.ApiException;
import com.github.GBSEcom.client.ApiResponse;
import com.github.GBSEcom.client.Configuration;
import com.github.GBSEcom.client.Pair;
import com.github.GBSEcom.client.ProgressRequestBody;
import com.github.GBSEcom.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.GBSEcom.model.AuthenticationUpdateRequest;
import com.github.GBSEcom.model.ErrorResponse;
import com.github.GBSEcom.model.PrimaryTransaction;
import com.github.GBSEcom.model.SecondaryTransaction;
import com.github.GBSEcom.model.TransactionErrorResponse;
import com.github.GBSEcom.model.TransactionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentApi {
    private ApiClient localVarApiClient;

    public PaymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for finalizeSecureTransaction
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param authenticationUpdateRequest Accepted request types: Secure3DAuthenticationUpdateRequest, Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest and UnionPayAuthenticationUpdateRequest. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeSecureTransactionCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, String messageSignature, String region, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = authenticationUpdateRequest;

        // create path and map variables
        String localVarPath = "/payments/{transaction-id}"
            .replaceAll("\\{" + "transaction-id" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("Client-Request-Id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", localVarApiClient.parameterToString(timestamp));
        }

        if (messageSignature != null) {
            localVarHeaderParams.put("Message-Signature", localVarApiClient.parameterToString(messageSignature));
        }

        if (region != null) {
            localVarHeaderParams.put("Region", localVarApiClient.parameterToString(region));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finalizeSecureTransactionValidateBeforeCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, String messageSignature, String region, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling finalizeSecureTransaction(Async)");
        }
        
        // verify the required parameter 'clientRequestId' is set
        if (clientRequestId == null) {
            throw new ApiException("Missing the required parameter 'clientRequestId' when calling finalizeSecureTransaction(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling finalizeSecureTransaction(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling finalizeSecureTransaction(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling finalizeSecureTransaction(Async)");
        }
        
        // verify the required parameter 'authenticationUpdateRequest' is set
        if (authenticationUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationUpdateRequest' when calling finalizeSecureTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = finalizeSecureTransactionCall(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationUpdateRequest, messageSignature, region, _callback);
        return localVarCall;

    }

    /**
     * Update a 3DSecure or UnionPay payment and continue processing.
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param authenticationUpdateRequest Accepted request types: Secure3DAuthenticationUpdateRequest, Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest and UnionPayAuthenticationUpdateRequest. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResponse finalizeSecureTransaction(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, String messageSignature, String region) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = finalizeSecureTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationUpdateRequest, messageSignature, region);
        return localVarResp.getData();
    }

    /**
     * Update a 3DSecure or UnionPay payment and continue processing.
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param authenticationUpdateRequest Accepted request types: Secure3DAuthenticationUpdateRequest, Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest and UnionPayAuthenticationUpdateRequest. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResponse> finalizeSecureTransactionWithHttpInfo(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, String messageSignature, String region) throws ApiException {
        okhttp3.Call localVarCall = finalizeSecureTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationUpdateRequest, messageSignature, region, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a 3DSecure or UnionPay payment and continue processing. (asynchronously)
     * Use this to handle a 3DSecure redirect response or UnionPay authentication, updating the transaction and continuing processing.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param authenticationUpdateRequest Accepted request types: Secure3DAuthenticationUpdateRequest, Secure3D10AuthenticationUpdateRequest, Secure3D21AuthenticationUpdateRequest and UnionPayAuthenticationUpdateRequest. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeSecureTransactionAsync(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, AuthenticationUpdateRequest authenticationUpdateRequest, String messageSignature, String region, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = finalizeSecureTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationUpdateRequest, messageSignature, region, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitPrimaryTransaction
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, SepaCreditTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitPrimaryTransactionCall(String contentType, String clientRequestId, String apiKey, Long timestamp, PrimaryTransaction primaryTransaction, String messageSignature, String region, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = primaryTransaction;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("Client-Request-Id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", localVarApiClient.parameterToString(timestamp));
        }

        if (messageSignature != null) {
            localVarHeaderParams.put("Message-Signature", localVarApiClient.parameterToString(messageSignature));
        }

        if (region != null) {
            localVarHeaderParams.put("Region", localVarApiClient.parameterToString(region));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitPrimaryTransactionValidateBeforeCall(String contentType, String clientRequestId, String apiKey, Long timestamp, PrimaryTransaction primaryTransaction, String messageSignature, String region, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling submitPrimaryTransaction(Async)");
        }
        
        // verify the required parameter 'clientRequestId' is set
        if (clientRequestId == null) {
            throw new ApiException("Missing the required parameter 'clientRequestId' when calling submitPrimaryTransaction(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling submitPrimaryTransaction(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling submitPrimaryTransaction(Async)");
        }
        
        // verify the required parameter 'primaryTransaction' is set
        if (primaryTransaction == null) {
            throw new ApiException("Missing the required parameter 'primaryTransaction' when calling submitPrimaryTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = submitPrimaryTransactionCall(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region, _callback);
        return localVarCall;

    }

    /**
     * Generate a primary transaction.
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, SepaCreditTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResponse submitPrimaryTransaction(String contentType, String clientRequestId, String apiKey, Long timestamp, PrimaryTransaction primaryTransaction, String messageSignature, String region) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = submitPrimaryTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region);
        return localVarResp.getData();
    }

    /**
     * Generate a primary transaction.
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, SepaCreditTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResponse> submitPrimaryTransactionWithHttpInfo(String contentType, String clientRequestId, String apiKey, Long timestamp, PrimaryTransaction primaryTransaction, String messageSignature, String region) throws ApiException {
        okhttp3.Call localVarCall = submitPrimaryTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a primary transaction. (asynchronously)
     * Use this to originate a financial transaction like a sale, preauthorization, or credit.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param primaryTransaction Accepted request types: AliPaySaleTransaction, ChinaPnRSaleTransaction, PaymentCardCreditTransaction, PaymentCardForcedTicketTransaction, PaymentCardSaleTransaction, PaymentCardPreAuthTransaction, PaymentCardPayerAuthTransaction, PaymentCardDisbursementTransaction, PaymentTokenCreditTransaction, PaymentTokenPreAuthTransaction, PaymentTokenSaleTransaction, PaymentTokenDisbursementTransaction, PaypalCreditTransaction, SepaSaleTransaction, SepaCreditTransaction, WalletSaleTransaction, and WalletPreAuthTransaction, PaymentDeviceSaleTransaction, PaymentDevicePreAuthTransaction, PaymentDeviceCreditTransaction, PaymentDeviceDisbursementTransaction, AchPreAuthTransaction, AchSaleTransaction, AchCreditTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitPrimaryTransactionAsync(String contentType, String clientRequestId, String apiKey, Long timestamp, PrimaryTransaction primaryTransaction, String messageSignature, String region, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitPrimaryTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSecondaryTransaction
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction, AchReturnTransaction and PreAuthSecondaryTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSecondaryTransactionCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = secondaryTransaction;

        // create path and map variables
        String localVarPath = "/payments/{transaction-id}"
            .replaceAll("\\{" + "transaction-id" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeId", storeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("Client-Request-Id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", localVarApiClient.parameterToString(timestamp));
        }

        if (messageSignature != null) {
            localVarHeaderParams.put("Message-Signature", localVarApiClient.parameterToString(messageSignature));
        }

        if (region != null) {
            localVarHeaderParams.put("Region", localVarApiClient.parameterToString(region));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSecondaryTransactionValidateBeforeCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling submitSecondaryTransaction(Async)");
        }
        
        // verify the required parameter 'clientRequestId' is set
        if (clientRequestId == null) {
            throw new ApiException("Missing the required parameter 'clientRequestId' when calling submitSecondaryTransaction(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling submitSecondaryTransaction(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling submitSecondaryTransaction(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling submitSecondaryTransaction(Async)");
        }
        
        // verify the required parameter 'secondaryTransaction' is set
        if (secondaryTransaction == null) {
            throw new ApiException("Missing the required parameter 'secondaryTransaction' when calling submitSecondaryTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = submitSecondaryTransactionCall(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId, _callback);
        return localVarCall;

    }

    /**
     * Perform a secondary transaction.
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction, AchReturnTransaction and PreAuthSecondaryTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResponse submitSecondaryTransaction(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = submitSecondaryTransactionWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId);
        return localVarResp.getData();
    }

    /**
     * Perform a secondary transaction.
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction, AchReturnTransaction and PreAuthSecondaryTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResponse> submitSecondaryTransactionWithHttpInfo(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId) throws ApiException {
        okhttp3.Call localVarCall = submitSecondaryTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform a secondary transaction. (asynchronously)
     * Use this to perform a void, postAuth or return secondary transaction. Partial postAuths and returns are allowed.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param secondaryTransaction Accepted request types: PostAuthTransaction, VoidTransaction, VoidPreAuthTransactions, ReturnTransaction, AchPostAuthTransaction, AchVoidTransaction, AchReturnTransaction and PreAuthSecondaryTransaction. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSecondaryTransactionAsync(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, SecondaryTransaction secondaryTransaction, String messageSignature, String region, String storeId, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSecondaryTransactionValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionInquiry
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionInquiryCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, String messageSignature, String region, String storeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{transaction-id}"
            .replaceAll("\\{" + "transaction-id" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeId", storeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("Client-Request-Id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", localVarApiClient.parameterToString(timestamp));
        }

        if (messageSignature != null) {
            localVarHeaderParams.put("Message-Signature", localVarApiClient.parameterToString(messageSignature));
        }

        if (region != null) {
            localVarHeaderParams.put("Region", localVarApiClient.parameterToString(region));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionInquiryValidateBeforeCall(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, String messageSignature, String region, String storeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transactionInquiry(Async)");
        }
        
        // verify the required parameter 'clientRequestId' is set
        if (clientRequestId == null) {
            throw new ApiException("Missing the required parameter 'clientRequestId' when calling transactionInquiry(Async)");
        }
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling transactionInquiry(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling transactionInquiry(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling transactionInquiry(Async)");
        }
        

        okhttp3.Call localVarCall = transactionInquiryCall(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve the state of a transaction.
     * Use this query to get the current state of an existing transaction.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResponse transactionInquiry(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, String messageSignature, String region, String storeId) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = transactionInquiryWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the state of a transaction.
     * Use this query to get the current state of an existing transaction.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResponse> transactionInquiryWithHttpInfo(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, String messageSignature, String region, String storeId) throws ApiException {
        okhttp3.Call localVarCall = transactionInquiryValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the state of a transaction. (asynchronously)
     * Use this query to get the current state of an existing transaction.
     * @param contentType Content type. (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
     * @param apiKey Key given to merchant after boarding associating their requests with the appropriate app in Apigee. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
     * @param transactionId Gateway transaction identifier as returned in the parameter ipgTransactionId or merchantTransactionId. (required)
     * @param messageSignature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)
     * @param region Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)
     * @param storeId An optional outlet ID for clients that support multiple stores in the same developer app. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be validated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request cannot be authenticated or was submitted with the wrong credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attempted action is not valid according to gateway rules. For example, the merchant is not set-up or the order already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Format that is not supported by the server for the HTTP method. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The processor declined the transaction. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> There was a problem communicating with the endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionInquiryAsync(String contentType, String clientRequestId, String apiKey, Long timestamp, String transactionId, String messageSignature, String region, String storeId, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionInquiryValidateBeforeCall(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
