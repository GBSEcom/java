/*
 * First Data REST Payment API Specification
 * First Data REST API for payment features for 6.2.0 release
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.firstdata.apiclient.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * PrimaryTransactionAdditionalDetails
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T17:00:16.359-05:00")
public class PrimaryTransactionAdditionalDetails {
    @SerializedName("referenceNumber")
    private String referenceNumber = null;

    @SerializedName("comments")
    private String comments = null;

    @SerializedName("dynamicMerchantName")
    private String dynamicMerchantName = null;

    @SerializedName("invoiceNumber")
    private String invoiceNumber = null;

    @SerializedName("purchaseOrderNumber")
    private String purchaseOrderNumber = null;

    /**
     * Gets or Sets recurringType
     */
    @JsonAdapter(RecurringTypeEnum.Adapter.class)
    public enum RecurringTypeEnum {
        FIRST("FIRST"),

        REPEAT("REPEAT"),

        STANDING("STANDING");

        private final String value;

        RecurringTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RecurringTypeEnum fromValue(String text) {
            for (RecurringTypeEnum b : RecurringTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RecurringTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RecurringTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RecurringTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RecurringTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("recurringType")
    private RecurringTypeEnum recurringType = null;

    public PrimaryTransactionAdditionalDetails referenceNumber(String referenceNumber) {
        this.referenceNumber = referenceNumber;
        return this;
    }

    /**
     * For FORCED_TICKET only. This stores the six-digit reference number clients receive as the result of a successful external authorization (e.g. by phone). The Gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization.
     *
     * @return referenceNumber
     **/
    @ApiModelProperty(example = "123455", value = "For FORCED_TICKET only. This stores the six-digit reference number clients receive as the result of a successful external authorization (e.g. by phone). The Gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization. ")
    public String getReferenceNumber() {
        return referenceNumber;
    }

    public void setReferenceNumber(String referenceNumber) {
        this.referenceNumber = referenceNumber;
    }

    public PrimaryTransactionAdditionalDetails comments(String comments) {
        this.comments = comments;
        return this;
    }

    /**
     * Get comments
     *
     * @return comments
     **/
    @ApiModelProperty(value = "")
    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public PrimaryTransactionAdditionalDetails dynamicMerchantName(String dynamicMerchantName) {
        this.dynamicMerchantName = dynamicMerchantName;
        return this;
    }

    /**
     * Get dynamicMerchantName
     *
     * @return dynamicMerchantName
     **/
    @ApiModelProperty(value = "")
    public String getDynamicMerchantName() {
        return dynamicMerchantName;
    }

    public void setDynamicMerchantName(String dynamicMerchantName) {
        this.dynamicMerchantName = dynamicMerchantName;
    }

    public PrimaryTransactionAdditionalDetails invoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }

    /**
     * Get invoiceNumber
     *
     * @return invoiceNumber
     **/
    @ApiModelProperty(value = "")
    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }

    public PrimaryTransactionAdditionalDetails purchaseOrderNumber(String purchaseOrderNumber) {
        this.purchaseOrderNumber = purchaseOrderNumber;
        return this;
    }

    /**
     * Get purchaseOrderNumber
     *
     * @return purchaseOrderNumber
     **/
    @ApiModelProperty(value = "")
    public String getPurchaseOrderNumber() {
        return purchaseOrderNumber;
    }

    public void setPurchaseOrderNumber(String purchaseOrderNumber) {
        this.purchaseOrderNumber = purchaseOrderNumber;
    }

    public PrimaryTransactionAdditionalDetails recurringType(RecurringTypeEnum recurringType) {
        this.recurringType = recurringType;
        return this;
    }

    /**
     * Get recurringType
     *
     * @return recurringType
     **/
    @ApiModelProperty(value = "")
    public RecurringTypeEnum getRecurringType() {
        return recurringType;
    }

    public void setRecurringType(RecurringTypeEnum recurringType) {
        this.recurringType = recurringType;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PrimaryTransactionAdditionalDetails primaryTransactionAdditionalDetails = (PrimaryTransactionAdditionalDetails) o;
        return Objects.equals(this.referenceNumber, primaryTransactionAdditionalDetails.referenceNumber) &&
                Objects.equals(this.comments, primaryTransactionAdditionalDetails.comments) &&
                Objects.equals(this.dynamicMerchantName, primaryTransactionAdditionalDetails.dynamicMerchantName) &&
                Objects.equals(this.invoiceNumber, primaryTransactionAdditionalDetails.invoiceNumber) &&
                Objects.equals(this.purchaseOrderNumber, primaryTransactionAdditionalDetails.purchaseOrderNumber) &&
                Objects.equals(this.recurringType, primaryTransactionAdditionalDetails.recurringType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(referenceNumber, comments, dynamicMerchantName, invoiceNumber, purchaseOrderNumber, recurringType);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PrimaryTransactionAdditionalDetails {\n");

        sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
        sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
        sb.append("    dynamicMerchantName: ").append(toIndentedString(dynamicMerchantName)).append("\n");
        sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
        sb.append("    purchaseOrderNumber: ").append(toIndentedString(purchaseOrderNumber)).append("\n");
        sb.append("    recurringType: ").append(toIndentedString(recurringType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

