/*
 * First Data REST Payment API Specification
 * First Data REST API for payment features for 6.2.0 release
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.firstdata.apiclient.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * The processor address validation responses
 */
@ApiModel(description = "The processor address validation responses")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T17:00:16.359-05:00")
public class TransactionResponseAvsResponse {
    /**
     * Response code for street number validation
     */
    @JsonAdapter(StreetNumberMatchEnum.Adapter.class)
    public enum StreetNumberMatchEnum {
        YES("YES"),

        NO("NO"),

        NOT_PROVIDED("NOT_PROVIDED"),

        NOT_CHECKED("NOT_CHECKED");

        private final String value;

        StreetNumberMatchEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StreetNumberMatchEnum fromValue(String text) {
            for (StreetNumberMatchEnum b : StreetNumberMatchEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StreetNumberMatchEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StreetNumberMatchEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StreetNumberMatchEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StreetNumberMatchEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("streetNumberMatch")
    private StreetNumberMatchEnum streetNumberMatch = null;

    /**
     * Response code for postal code match
     */
    @JsonAdapter(PostalCodeMatchEnum.Adapter.class)
    public enum PostalCodeMatchEnum {
        YES("YES"),

        NO("NO"),

        NOT_PROVIDED("NOT_PROVIDED"),

        NOT_CHECKED("NOT_CHECKED");

        private final String value;

        PostalCodeMatchEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PostalCodeMatchEnum fromValue(String text) {
            for (PostalCodeMatchEnum b : PostalCodeMatchEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<PostalCodeMatchEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PostalCodeMatchEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public PostalCodeMatchEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return PostalCodeMatchEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("postalCodeMatch")
    private PostalCodeMatchEnum postalCodeMatch = null;

    public TransactionResponseAvsResponse streetNumberMatch(StreetNumberMatchEnum streetNumberMatch) {
        this.streetNumberMatch = streetNumberMatch;
        return this;
    }

    /**
     * Response code for street number validation
     *
     * @return streetNumberMatch
     **/
    @ApiModelProperty(example = "YES", value = "Response code for street number validation")
    public StreetNumberMatchEnum getStreetNumberMatch() {
        return streetNumberMatch;
    }

    public void setStreetNumberMatch(StreetNumberMatchEnum streetNumberMatch) {
        this.streetNumberMatch = streetNumberMatch;
    }

    public TransactionResponseAvsResponse postalCodeMatch(PostalCodeMatchEnum postalCodeMatch) {
        this.postalCodeMatch = postalCodeMatch;
        return this;
    }

    /**
     * Response code for postal code match
     *
     * @return postalCodeMatch
     **/
    @ApiModelProperty(example = "NOT_CHECKED", value = "Response code for postal code match")
    public PostalCodeMatchEnum getPostalCodeMatch() {
        return postalCodeMatch;
    }

    public void setPostalCodeMatch(PostalCodeMatchEnum postalCodeMatch) {
        this.postalCodeMatch = postalCodeMatch;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionResponseAvsResponse transactionResponseAvsResponse = (TransactionResponseAvsResponse) o;
        return Objects.equals(this.streetNumberMatch, transactionResponseAvsResponse.streetNumberMatch) &&
                Objects.equals(this.postalCodeMatch, transactionResponseAvsResponse.postalCodeMatch);
    }

    @Override
    public int hashCode() {
        return Objects.hash(streetNumberMatch, postalCodeMatch);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionResponseAvsResponse {\n");

        sb.append("    streetNumberMatch: ").append(toIndentedString(streetNumberMatch)).append("\n");
        sb.append("    postalCodeMatch: ").append(toIndentedString(postalCodeMatch)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

