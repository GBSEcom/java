/*
 * First Data REST Payment API Specification
 * First Data REST API for payment features for 6.2.0 release
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.firstdata.apiclient.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * The payment object for Apple Pay Encrypted Payload
 */
@ApiModel(description = "The payment object for Apple Pay Encrypted Payload")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T17:00:16.359-05:00")
public class ApplePay {
    @SerializedName("signature")
    private String signature = null;

    @SerializedName("header")
    private ApplePayHeader header = null;

    @SerializedName("data")
    private String data = null;

    /**
     * Version information about the payment token
     */
    @JsonAdapter(VersionEnum.Adapter.class)
    public enum VersionEnum {
        EC_V1("EC_v1");

        private final String value;

        VersionEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static VersionEnum fromValue(String text) {
            for (VersionEnum b : VersionEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<VersionEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public VersionEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return VersionEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("version")
    private VersionEnum version = null;

    @SerializedName("appId")
    private String appId = null;

    public ApplePay signature(String signature) {
        this.signature = signature;
        return this;
    }

    /**
     * Signature of the payment and header data.
     *
     * @return signature
     **/
    @ApiModelProperty(value = "Signature of the payment and header data.")
    public String getSignature() {
        return signature;
    }

    public void setSignature(String signature) {
        this.signature = signature;
    }

    public ApplePay header(ApplePayHeader header) {
        this.header = header;
        return this;
    }

    /**
     * Get header
     *
     * @return header
     **/
    @ApiModelProperty(value = "")
    public ApplePayHeader getHeader() {
        return header;
    }

    public void setHeader(ApplePayHeader header) {
        this.header = header;
    }

    public ApplePay data(String data) {
        this.data = data;
        return this;
    }

    /**
     * The main payload of encrypted payment data
     *
     * @return data
     **/
    @ApiModelProperty(required = true, value = "The main payload of encrypted payment data")
    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = data;
    }

    public ApplePay version(VersionEnum version) {
        this.version = version;
        return this;
    }

    /**
     * Version information about the payment token
     *
     * @return version
     **/
    @ApiModelProperty(value = "Version information about the payment token")
    public VersionEnum getVersion() {
        return version;
    }

    public void setVersion(VersionEnum version) {
        this.version = version;
    }

    public ApplePay appId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Merchant identifier for app registration at digital Wallet Providers
     *
     * @return appId
     **/
    @ApiModelProperty(example = "gma.example.merchant.com", value = "Merchant identifier for app registration at digital Wallet Providers")
    public String getAppId() {
        return appId;
    }

    public void setAppId(String appId) {
        this.appId = appId;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplePay applePay = (ApplePay) o;
        return Objects.equals(this.signature, applePay.signature) &&
                Objects.equals(this.header, applePay.header) &&
                Objects.equals(this.data, applePay.data) &&
                Objects.equals(this.version, applePay.version) &&
                Objects.equals(this.appId, applePay.appId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(signature, header, data, version, appId);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApplePay {\n");

        sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
        sb.append("    header: ").append(toIndentedString(header)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

