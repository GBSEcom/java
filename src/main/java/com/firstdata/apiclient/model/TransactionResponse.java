/*
 * First Data REST Payment API Specification
 * First Data REST API for payment features for 6.2.0 release
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.firstdata.apiclient.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * This is the common object for primary and secondary payment requests.
 */
@ApiModel(description = "This is the common object for primary and secondary payment requests.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T17:00:16.359-05:00")
public class TransactionResponse {
    @SerializedName("clientRequestId")
    private String clientRequestId = null;

    @SerializedName("apiTraceId")
    private String apiTraceId = null;

    @SerializedName("ipgTransactionId")
    private String ipgTransactionId = null;

    @SerializedName("orderId")
    private String orderId = null;

    @SerializedName("transactionType")
    private String transactionType = null;

    @SerializedName("authorizationCode")
    private String authorizationCode = null;

    @SerializedName("avsResponse")
    private TransactionResponseAvsResponse avsResponse = null;

    /**
     * The processor card code validation response.
     */
    @JsonAdapter(CardCodeValueResponseEnum.Adapter.class)
    public enum CardCodeValueResponseEnum {
        MATCHED("MATCHED"),

        NOT_MATCHED("NOT_MATCHED"),

        NOT_PROCESSED("NOT_PROCESSED"),

        NOT_PRESENT("NOT_PRESENT"),

        NOT_CERTIFIED("NOT_CERTIFIED"),

        NO_RESPONSE("NO_RESPONSE"),

        NOT_SENT("NOT_SENT");

        private final String value;

        CardCodeValueResponseEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CardCodeValueResponseEnum fromValue(String text) {
            for (CardCodeValueResponseEnum b : CardCodeValueResponseEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<CardCodeValueResponseEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CardCodeValueResponseEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CardCodeValueResponseEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return CardCodeValueResponseEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("cardCodeValueResponse")
    private CardCodeValueResponseEnum cardCodeValueResponse = null;

    @SerializedName("brand")
    private String brand = null;

    @SerializedName("country")
    private String country = null;

    @SerializedName("terminalId")
    private String terminalId = null;

    @SerializedName("clientTransactionId")
    private String clientTransactionId = null;

    @SerializedName("transactionTime")
    private Long transactionTime = null;

    @SerializedName("approvedAmount")
    private Amount approvedAmount = null;

    /**
     * APPROVED/WAITING are returned by endpoints. VALIDATION_FAILED/DECLINED are errors. See Error objects for details.
     */
    @JsonAdapter(TransactionStatusEnum.Adapter.class)
    public enum TransactionStatusEnum {
        APPROVED("APPROVED"),

        WAITING("WAITING"),

        VALIDATION_FAILED("VALIDATION_FAILED"),

        DECLINED("DECLINED");

        private final String value;

        TransactionStatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TransactionStatusEnum fromValue(String text) {
            for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<TransactionStatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TransactionStatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TransactionStatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TransactionStatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("transactionStatus")
    private TransactionStatusEnum transactionStatus = null;

    @SerializedName("authenticationRedirect")
    private TransactionResponseAuthenticationRedirect authenticationRedirect = null;

    @SerializedName("error")
    private Error error = null;

    public TransactionResponse clientRequestId(String clientRequestId) {
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * Value echoed from the request header
     *
     * @return clientRequestId
     **/
    @ApiModelProperty(example = "30dd879c-ee2f-11db-8314-0800200c9a66", value = "Value echoed from the request header")
    public String getClientRequestId() {
        return clientRequestId;
    }

    public void setClientRequestId(String clientRequestId) {
        this.clientRequestId = clientRequestId;
    }

    public TransactionResponse apiTraceId(String apiTraceId) {
        this.apiTraceId = apiTraceId;
        return this;
    }

    /**
     * Echoes back the value in the request header
     *
     * @return apiTraceId
     **/
    @ApiModelProperty(example = "2132352352112454", value = "Echoes back the value in the request header")
    public String getApiTraceId() {
        return apiTraceId;
    }

    public void setApiTraceId(String apiTraceId) {
        this.apiTraceId = apiTraceId;
    }

    public TransactionResponse ipgTransactionId(String ipgTransactionId) {
        this.ipgTransactionId = ipgTransactionId;
        return this;
    }

    /**
     * The Gateway generated Transaction ID
     *
     * @return ipgTransactionId
     **/
    @ApiModelProperty(example = "838916029301", value = "The Gateway generated Transaction ID")
    public String getIpgTransactionId() {
        return ipgTransactionId;
    }

    public void setIpgTransactionId(String ipgTransactionId) {
        this.ipgTransactionId = ipgTransactionId;
    }

    public TransactionResponse orderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Client Order ID if supplied by a client; otherwise the Order ID
     *
     * @return orderId
     **/
    @ApiModelProperty(example = "123456", value = "Client Order ID if supplied by a client; otherwise the Order ID")
    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public TransactionResponse transactionType(String transactionType) {
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Transaction type
     *
     * @return transactionType
     **/
    @ApiModelProperty(example = "SALE", value = "Transaction type")
    public String getTransactionType() {
        return transactionType;
    }

    public void setTransactionType(String transactionType) {
        this.transactionType = transactionType;
    }

    public TransactionResponse authorizationCode(String authorizationCode) {
        this.authorizationCode = authorizationCode;
        return this;
    }

    /**
     * The processor approval code for compliance
     *
     * @return authorizationCode
     **/
    @ApiModelProperty(example = "A1B2C3", value = "The processor approval code for compliance")
    public String getAuthorizationCode() {
        return authorizationCode;
    }

    public void setAuthorizationCode(String authorizationCode) {
        this.authorizationCode = authorizationCode;
    }

    public TransactionResponse avsResponse(TransactionResponseAvsResponse avsResponse) {
        this.avsResponse = avsResponse;
        return this;
    }

    /**
     * Get avsResponse
     *
     * @return avsResponse
     **/
    @ApiModelProperty(value = "")
    public TransactionResponseAvsResponse getAvsResponse() {
        return avsResponse;
    }

    public void setAvsResponse(TransactionResponseAvsResponse avsResponse) {
        this.avsResponse = avsResponse;
    }

    public TransactionResponse cardCodeValueResponse(CardCodeValueResponseEnum cardCodeValueResponse) {
        this.cardCodeValueResponse = cardCodeValueResponse;
        return this;
    }

    /**
     * The processor card code validation response.
     *
     * @return cardCodeValueResponse
     **/
    @ApiModelProperty(example = "MATCHED", value = "The processor card code validation response.")
    public CardCodeValueResponseEnum getCardCodeValueResponse() {
        return cardCodeValueResponse;
    }

    public void setCardCodeValueResponse(CardCodeValueResponseEnum cardCodeValueResponse) {
        this.cardCodeValueResponse = cardCodeValueResponse;
    }

    public TransactionResponse brand(String brand) {
        this.brand = brand;
        return this;
    }

    /**
     * Card brand of the payment instrument
     *
     * @return brand
     **/
    @ApiModelProperty(example = "CABAL_ARGENTINA", value = "Card brand of the payment instrument")
    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public TransactionResponse country(String country) {
        this.country = country;
        return this;
    }

    /**
     * Country of the card issuer
     *
     * @return country
     **/
    @ApiModelProperty(example = "ARG", value = "Country of the card issuer")
    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public TransactionResponse terminalId(String terminalId) {
        this.terminalId = terminalId;
        return this;
    }

    /**
     * The terminal that is processing the transaction
     *
     * @return terminalId
     **/
    @ApiModelProperty(example = "12345678", value = "The terminal that is processing the transaction")
    public String getTerminalId() {
        return terminalId;
    }

    public void setTerminalId(String terminalId) {
        this.terminalId = terminalId;
    }

    public TransactionResponse clientTransactionId(String clientTransactionId) {
        this.clientTransactionId = clientTransactionId;
        return this;
    }

    /**
     * The unique client Transaction ID from the Request header, if supplied
     *
     * @return clientTransactionId
     **/
    @ApiModelProperty(example = "lsk23532djljff3", value = "The unique client Transaction ID from the Request header, if supplied")
    public String getClientTransactionId() {
        return clientTransactionId;
    }

    public void setClientTransactionId(String clientTransactionId) {
        this.clientTransactionId = clientTransactionId;
    }

    public TransactionResponse transactionTime(Long transactionTime) {
        this.transactionTime = transactionTime;
        return this;
    }

    /**
     * The transaction time in seconds since epoch
     *
     * @return transactionTime
     **/
    @ApiModelProperty(example = "1518811817", value = "The transaction time in seconds since epoch")
    public Long getTransactionTime() {
        return transactionTime;
    }

    public void setTransactionTime(Long transactionTime) {
        this.transactionTime = transactionTime;
    }

    public TransactionResponse approvedAmount(Amount approvedAmount) {
        this.approvedAmount = approvedAmount;
        return this;
    }

    /**
     * Get approvedAmount
     *
     * @return approvedAmount
     **/
    @ApiModelProperty(value = "")
    public Amount getApprovedAmount() {
        return approvedAmount;
    }

    public void setApprovedAmount(Amount approvedAmount) {
        this.approvedAmount = approvedAmount;
    }

    public TransactionResponse transactionStatus(TransactionStatusEnum transactionStatus) {
        this.transactionStatus = transactionStatus;
        return this;
    }

    /**
     * APPROVED/WAITING are returned by endpoints. VALIDATION_FAILED/DECLINED are errors. See Error objects for details.
     *
     * @return transactionStatus
     **/
    @ApiModelProperty(example = "APPROVED", value = "APPROVED/WAITING are returned by endpoints. VALIDATION_FAILED/DECLINED are errors. See Error objects for details.")
    public TransactionStatusEnum getTransactionStatus() {
        return transactionStatus;
    }

    public void setTransactionStatus(TransactionStatusEnum transactionStatus) {
        this.transactionStatus = transactionStatus;
    }

    public TransactionResponse authenticationRedirect(TransactionResponseAuthenticationRedirect authenticationRedirect) {
        this.authenticationRedirect = authenticationRedirect;
        return this;
    }

    /**
     * Get authenticationRedirect
     *
     * @return authenticationRedirect
     **/
    @ApiModelProperty(value = "")
    public TransactionResponseAuthenticationRedirect getAuthenticationRedirect() {
        return authenticationRedirect;
    }

    public void setAuthenticationRedirect(TransactionResponseAuthenticationRedirect authenticationRedirect) {
        this.authenticationRedirect = authenticationRedirect;
    }

    public TransactionResponse error(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Get error
     *
     * @return error
     **/
    @ApiModelProperty(value = "")
    public Error getError() {
        return error;
    }

    public void setError(Error error) {
        this.error = error;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionResponse transactionResponse = (TransactionResponse) o;
        return Objects.equals(this.clientRequestId, transactionResponse.clientRequestId) &&
                Objects.equals(this.apiTraceId, transactionResponse.apiTraceId) &&
                Objects.equals(this.ipgTransactionId, transactionResponse.ipgTransactionId) &&
                Objects.equals(this.orderId, transactionResponse.orderId) &&
                Objects.equals(this.transactionType, transactionResponse.transactionType) &&
                Objects.equals(this.authorizationCode, transactionResponse.authorizationCode) &&
                Objects.equals(this.avsResponse, transactionResponse.avsResponse) &&
                Objects.equals(this.cardCodeValueResponse, transactionResponse.cardCodeValueResponse) &&
                Objects.equals(this.brand, transactionResponse.brand) &&
                Objects.equals(this.country, transactionResponse.country) &&
                Objects.equals(this.terminalId, transactionResponse.terminalId) &&
                Objects.equals(this.clientTransactionId, transactionResponse.clientTransactionId) &&
                Objects.equals(this.transactionTime, transactionResponse.transactionTime) &&
                Objects.equals(this.approvedAmount, transactionResponse.approvedAmount) &&
                Objects.equals(this.transactionStatus, transactionResponse.transactionStatus) &&
                Objects.equals(this.authenticationRedirect, transactionResponse.authenticationRedirect) &&
                Objects.equals(this.error, transactionResponse.error);
    }

    @Override
    public int hashCode() {
        return Objects.hash(clientRequestId, apiTraceId, ipgTransactionId, orderId, transactionType, authorizationCode, avsResponse, cardCodeValueResponse, brand, country, terminalId, clientTransactionId, transactionTime, approvedAmount, transactionStatus, authenticationRedirect, error);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionResponse {\n");

        sb.append("    clientRequestId: ").append(toIndentedString(clientRequestId)).append("\n");
        sb.append("    apiTraceId: ").append(toIndentedString(apiTraceId)).append("\n");
        sb.append("    ipgTransactionId: ").append(toIndentedString(ipgTransactionId)).append("\n");
        sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
        sb.append("    authorizationCode: ").append(toIndentedString(authorizationCode)).append("\n");
        sb.append("    avsResponse: ").append(toIndentedString(avsResponse)).append("\n");
        sb.append("    cardCodeValueResponse: ").append(toIndentedString(cardCodeValueResponse)).append("\n");
        sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
        sb.append("    country: ").append(toIndentedString(country)).append("\n");
        sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
        sb.append("    clientTransactionId: ").append(toIndentedString(clientTransactionId)).append("\n");
        sb.append("    transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
        sb.append("    approvedAmount: ").append(toIndentedString(approvedAmount)).append("\n");
        sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
        sb.append("    authenticationRedirect: ").append(toIndentedString(authenticationRedirect)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

