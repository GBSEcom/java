/*
 * First Data REST Payment API Specification
 * First Data REST API for payment features for 6.2.0 release
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.firstdata.apiclient.api;

import com.firstdata.apiclient.ApiClient;
import com.firstdata.apiclient.ApiException;
import com.firstdata.apiclient.RequestUtil;
import com.firstdata.apiclient.model.CertificateCreationResponse;
import com.firstdata.apiclient.model.PrimaryTransaction;
import com.firstdata.apiclient.model.SecondaryTransaction;
import com.firstdata.apiclient.model.TransactionResponse;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import lombok.experimental.Accessors;

import java.util.HashMap;
import java.util.Map;

public class PaymentApi {

    @Accessors(prefix = "")
    @Getter
    @Setter
    private ApiClient apiClient;

    private final String contentType;
    private final String apiSecret;
    private final String apiKey;

    public PaymentApi(@NonNull String apiSecret, @NonNull String apiKey) {
        this("application/json", apiSecret, apiKey);
    }

    public PaymentApi(@NonNull String contentType, @NonNull String apiSecret, @NonNull String apiKey) {
        this(new ApiClient(), contentType, apiSecret, apiKey);
    }

    public PaymentApi(@NonNull ApiClient apiClient, @NonNull String contentType, @NonNull String apiSecret, @NonNull String apiKey) {
        this.apiClient = apiClient;
        this.contentType = contentType;
        this.apiSecret = apiSecret;
        this.apiKey = apiKey;
    }

    /**
     * Postauth transaction
     * Use this to capture/complete a preauth transaction. Partial postauths are allowed.
     *
     * @param transactionId Identifies the primary transaction (required)
     * @param payload       (required)
     * @return CertificateCreationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateCreationResponse postAuthTransaction(@NonNull String transactionId, @NonNull SecondaryTransaction payload) throws ApiException {
        final String path = String.format("/payments/%s/postauth", apiClient.escapeString(transactionId));
        return apiClient.doPost(path, payload, getCommonHeaders(), CertificateCreationResponse.class)
                .getData();
    }

    /**
     * Return/Refund transaction
     * Use this for returns and partial returns.
     *
     * @param transactionId Identifies the primary transaction (required)
     * @param payload       (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse refundTransaction(@NonNull String transactionId, @NonNull SecondaryTransaction payload) throws ApiException {
        final String path = String.format("/payments/%s/return", apiClient.escapeString(transactionId));
        return apiClient.doPost(path, payload, getCommonHeaders(), TransactionResponse.class)
                .getData();
    }

    /**
     * Void transaction
     * This is used to reverse a financial transaction such as Postauth, Return, Preauth, or Sale.
     *
     * @param transactionId Identifies the primary transaction (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse voidTransaction(@NonNull String transactionId) throws ApiException {
        final String path = String.format("/payments/%s/void", apiClient.escapeString(transactionId));
        return apiClient.doPost(path, null, getCommonHeaders(), TransactionResponse.class)
                .getData();
    }

    /**
     * Primary transaction creation
     * Use this to originate a financial transaction, like a sale, authorization, or credit.
     *
     * @param payload Primary Transaction request (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse createTransaction(@NonNull PrimaryTransaction payload) throws ApiException {
        final String path = "/payments";
        return apiClient.doPost(path, payload, getCommonHeaders(), TransactionResponse.class)
                .getData();
    }

    private Map<String, String> getCommonHeaders() {
        final Long timestamp = RequestUtil.timestamp();
        final String clientRequestId = RequestUtil.uuid();
        final String messageSignature = RequestUtil.messageSignature(apiSecret, apiKey, clientRequestId, timestamp);

        final Map<String, String> headerParams = new HashMap<>();
        headerParams.put("Content-Type", apiClient.parameterToString(contentType));
        headerParams.put("Api-Key", apiClient.parameterToString(apiKey));
        headerParams.put("Client-Request-Id", apiClient.parameterToString(clientRequestId));
        headerParams.put("Timestamp", apiClient.parameterToString(timestamp));
        headerParams.put("Message-Signature", apiClient.parameterToString(messageSignature));
        headerParams.put("Accept", "application/json");
        return headerParams;
    }
}
